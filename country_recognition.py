# -*- coding: utf-8 -*-
"""country_recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSfrp_VXCDx0UDk8Ut1lNbVLqQZPOWsd
"""

from keras.layers import Input,Lambda,Dense,Flatten
from keras.models import Model,Sequential,load_model
from keras.applications.vgg19 import VGG19
from keras.applications.vgg16 import VGG16 ,preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from glob import glob
import numpy as np
import tensorflow as tf
from keras.callbacks import EarlyStopping

from google.colab import drive
drive.mount('/content/drive')

Image_size=[224,224]

train_path='/content/drive/MyDrive/Datasetfinal/Country Dataset/training'
test_path='/content/drive/MyDrive/Datasetfinal/Country Dataset/validation'

vgg = VGG19(input_shape=Image_size+[3],weights='imagenet',include_top=False)

for layer in vgg.layers:
    layer.trainable=False

x=Flatten()(vgg.output)

first=Dense(2048,activation='relu')(x)
first=Dense(1024,activation='relu')(first)
second=Dense(256,activation='relu')(first)
prediction = Dense(8,activation='sigmoid')(second)

model=Model(inputs=vgg.input,outputs=prediction)

model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', mode='min', patience=2)

model.summary()

train_datagen=ImageDataGenerator(rescale=1./255,
                                shear_range=.25,
                                zoom_range=.15,
                                horizontal_flip=True
                                )
test_datagen=ImageDataGenerator(rescale=1./255)

train_set=train_datagen.flow_from_directory(train_path,
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

test_set=test_datagen.flow_from_directory(test_path,
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

model1 = model.fit(train_set,validation_data=test_set,epochs=30,steps_per_epoch=0.5*len(train_set), validation_steps=len(test_set))

import matplotlib.pyplot as plt

# Assuming you have already trained the model and have access to the training history
history = model1.history

# Extracting loss values from the history
train_loss = history['loss']
val_loss = history['val_loss']

# Creating x-axis (epochs)
epochs = range(1, len(train_loss) + 1)

# Plotting
plt.plot(epochs, train_loss, 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and Validation Loss of Country Dataset')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Adding the difference between validation loss and training loss
plt.figure()
plt.plot(epochs, val_loss - train_loss, 'g', label='Difference (Val loss - Train loss)')
plt.title('Difference between Validation and Training Loss of Country Dataset')
plt.xlabel('Epochs')
plt.ylabel('Loss Difference')
plt.legend()

plt.show()

import matplotlib.pyplot as plt

# Assuming you have already trained the model and have access to the training history
history = model1.history

# Extracting accuracy values from the history
train_accuracy = history['accuracy']
val_accuracy = history['val_accuracy']

# Creating x-axis (epochs)
epochs = range(1, len(train_accuracy) + 1)

# Plotting
plt.plot(epochs, train_accuracy, 'b', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')
plt.title('Training and Validation Accuracy of Country Dataset')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

# Adding the difference between validation accuracy and training accuracy
plt.figure()
plt.plot(epochs, val_accuracy - train_accuracy, 'g', label='Difference (Val accuracy - Train accuracy)')
plt.title('Difference between Validation and Training Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy Difference')
plt.legend()

plt.show()

from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential, load_model

from keras.preprocessing.image import load_img

def preprocess_img(img):
    img=image.load_img(img,target_size=(224,224))
    img=image.img_to_array(img)
    img=np.expand_dims(img,axis=0)
    img=preprocess_input(img)
    return img

img=preprocess_img("/content/drive/MyDrive/Datasetfinal/Country Dataset/validation/Kuwait/country_0_1118.jpeg")

label=model.predict(img)
print(label)

label_decision = {0: "Australia", 1: "Europe", 2:"Japan", 3: "Kuwait", 4: "Mexico", 5:"New Zealand", 6: "Switzerland", 7: "UK"}
print("Country - ", label_decision[label.argmax()])

model.save("/content/drive/MyDrive/Datasetfinal/Country Dataset/initial_country_model2.h5")

