# -*- coding: utf-8 -*-
"""currency_recognition_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v4jDHJSckOUqzLmM7aQmGiJ_VXf1Nra2
"""

from keras.layers import Input,Lambda,Dense,Flatten
from keras.models import Model,Sequential,load_model
from keras.applications.vgg16 import VGG16 ,preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from glob import glob
import numpy as np
import tensorflow as tf

from google.colab import drive
drive.mount('/content/drive')

Image_size=[224,224]

train_path='/content/drive/MyDrive/Datasetfinal/Currency Dataset/training'
test_path='/content/drive/MyDrive/Datasetfinal/Currency Dataset/validation'

vgg = VGG16(input_shape=Image_size+[3],weights='imagenet',include_top=False)

for layer in vgg.layers:
    layer.trainable=False

x=Flatten()(vgg.output)

first=Dense(2048,activation='relu')(x)
first=Dense(1024,activation='relu')(first)
second=Dense(256,activation='relu')(first)
prediction = Dense(13,activation='softmax')(second)

model=Model(inputs=vgg.input,outputs=prediction)

model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

model.summary()

train_datagen=ImageDataGenerator(rescale=1./255,
                                shear_range=.25,
                                zoom_range=.15,
                                horizontal_flip=True
                                )
test_datagen=ImageDataGenerator(rescale=1./255)

train_set=train_datagen.flow_from_directory(train_path,
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

test_set=test_datagen.flow_from_directory(test_path,
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

# model1 = model.fit(train_set,validation_data=test_set,shuffle=True,epochs=30,steps_per_epoch=0.05*len(train_set),
#   validation_steps=len(test_set))

batch_size = 32
total_batches_train = len(train_set) // batch_size
steps_per_epoch = 0.35 * total_batches_train
model1 = model.fit(train_set,
                   validation_data=test_set,
                   epochs=30,
                   steps_per_epoch=steps_per_epoch,
                   validation_steps=len(test_set))

import matplotlib.pyplot as plt

# Assuming you have already trained the model and have access to the training history
history = model1.history

# Extracting loss and accuracy values from the history
train_loss = history['loss']
val_loss = history['val_loss']
train_accuracy = history['accuracy']
val_accuracy = history['val_accuracy']

# Creating x-axis (epochs)
epochs = range(1, len(train_loss) + 1)

# Plotting loss
plt.subplot(1, 2, 1)
plt.plot(epochs, train_loss, 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training/Val Loss - Curr Dataset')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Plotting accuracy
plt.subplot(1, 2, 2)
plt.plot(epochs, train_accuracy, 'b', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')
plt.title('Training/Val Accuracy - Curr Dataset')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential, load_model

from keras.preprocessing.image import load_img

def preprocess_img(img):
    img=image.load_img(img,target_size=(224,224))
    img=image.img_to_array(img)
    img=np.expand_dims(img,axis=0)
    img=preprocess_input(img)
    return img

img=preprocess_img("/content/drive/MyDrive/Datasetfinal/Currency Dataset/validation/10/c10_0_1407.jpeg")

label=model.predict(img)
print(label)

print(label.argmax())
#label_decision = {0: "Australia", 1: "Europe", 2:"Japan", 3: "Kuwait", 4: "Mexico", 5:"New Zealand", 6: "Switzerland", 7: "UK"}
#print("Country - ", label_decision[label.argmax()])

test_set.class_indices

model.save("/content/drive/MyDrive/Datasetfinal/Currency Dataset/initial_currency_model.h5")

